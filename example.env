# !!REQUIRED!!
# The Discord token for the bot you created (available on your bot page in the developer portal: https://discord.com/developers/applications))
# Must be a valid Discord bot token (see https://discord.com/developers/docs/topics/oauth2#bot-vs-user-accounts)
DISCORD_BOT_TOKEN=[Replace with your Discord bot token]

# !!REQUIRED!!
# The ID of the CSS Discord server
# Must be a valid Discord guild ID (see https://docs.pycord.dev/en/stable/api/abcs.html#discord.abc.Snowflake.id)
DISCORD_GUILD_ID=[Replace with the ID of the CSS Discord server]

# Optional: error logs will always be sent to the console, this setting allows them to also be sent to a Discord log channel
# The webhook URL of the Discord text channel where error logs should be sent
# Must be a valid Discord channel webhook URL (see https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks)
DISCORD_LOG_CHANNEL_WEBHOOK_URL=[Replace with your Discord log channel webhook URL]


# The minimum level that logs must meet in order to be logged to the console output stream
# One of: DEBUG, INFO, WARNING, ERROR, CRITICAL
CONSOLE_LOG_LEVEL=INFO


# !!REQUIRED!!
# The URL of the CSS members page (currently found on the Guild of Students website, make sure it's sorted by group)
# Must be a valid URL
MEMBERS_PAGE_URL=https://www.guildofstudents.com/organisation/memberlist/6531/?sort=groups

# !!REQUIRED!!
# The CSS members page session cookie (probably listed as .ASPXAUTH, gives the bot permission to view your members page as if it were logged in to the website as a Committee member, you can extract this from your web browser after logging into the CSS members page)
MEMBERS_PAGE_COOKIE=[Replace with your .ASPXAUTH cookie]


# The probability that the more rare ping command response will be sent instead of the normal one
# Must be a float between & including 1 & 0
PING_COMMAND_EASTER_EGG_PROBABILITY=0.01


# The path to the messages JSON file that contains the common messages sent by the bot
# Must be a path to a JSON file that exists, that contains a JSON string that can be decoded into a Python dict object
MESSAGES_FILE_PATH=messages.json


# Whether introduction reminders will be sent to users that are not inducted, saying that they need to send an introduction to be allowed access
# One of: Once, Interval, False
SEND_INTRODUCTION_REMINDERS=Once

# The interval of time between sending out reminders to users that are not inducted, saying that they need to send an introduction to be allowed access
# Is ignored if SEND_INTRODUCTION_REMINDERS=Once or SEND_INTRODUCTION_REMINDERS=False
# Must be a string of the seconds, minutes or hours between reminders (format: "<seconds>s<minutes>m<hours>h")
INTRODUCTION_REMINDER_INTERVAL=6h

# Whether to kick users that that have been in the server for a KICK_NO_INTRODUCTION_MEMBERS_DELAY amount of time but have not yet send an introduction
# Must be a boolean (True or False)
KICK_NO_INTRODUCTION_MEMBERS=False

# How long to wait before kicking users that have not sent an introduction (only executed every INTRODUCTION_REMINDER_INTERVAL amount of time)
# Is ignored if KICK_NO_INTRODUCTION_MEMBERS=False
# Must be a string of the seconds, minutes, hours, days or weeks between reminders (format: "<seconds>s<minutes>m<hours>h<days>d<weeks>w")
# The delay must be longer than 1 day
KICK_NO_INTRODUCTION_MEMBERS_DELAY=5d

# Whether reminders will be sent to users that have been inducted, saying that they can get opt-in roles. (This message will be only sent once per user)
# Must be a boolean (True or False)
SEND_GET_ROLES_REMINDERS=True

# The interval of time between sending out reminders to users that have been inducted, saying that they can get opt-in roles. (This message will be only sent once, the interval is just how often the check for new guests occurs)
# Is ignored if SEND_GET_ROLES_REMINDERS=False
# Must be a string of the seconds, minutes or hours between reminders (format: "<seconds>s<minutes>m<hours>h")
GET_ROLES_REMINDER_INTERVAL=24h


# The number of days to look over messages sent, to generate statistics data
# Must be a float representing the number of days to look back through
STATISTICS_DAYS=30

# The names of the roles to gather statistics about, to display in bar chart graphs
# Must be a comma seperated list of strings of role names
STATISTICS_ROLES=Committee,Committee-Elect,Student Rep,Member,Guest,Server Booster,Foundation Year,First Year,Second Year,Final Year,Year In Industry,Year Abroad,PGT,PGR,Alumnus/Alumna,Postdoc,Quiz Victor


# !!REQUIRED!!
# The URL of the CSS Discord server moderation document
# Must be a valid URL
MODERATION_DOCUMENT_URL=https://docs.google.com/document/d/1wAskMt0U75dTLrTeb-ZbW4vn1qmSvp1LehjyUAJ74dU/edit?usp=sharing


# The name of the channel that warning messages will be sent to, when a committee member manually applies a moderation action (instead of using the `/strike` command)
# Must be the name of a Discord channel in the CSS Discord server, or the value "DM" (which indicates that the messages will be sent in the committee member's DMs)
MANUAL_MODERATION_WARNING_MESSAGE_LOCATION=DM
