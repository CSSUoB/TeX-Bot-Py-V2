# !!REQUIRED!!
# The Discord token for the bot you created (available on your bot page in the developer portal: https://discord.com/developers/applications))
# Must be a valid Discord bot token (see https://discord.com/developers/docs/topics/oauth2#bot-vs-user-accounts)
DISCORD_BOT_TOKEN=[Replace with your Discord bot token]

# !!REQUIRED!!
# The Discord application ID of the bot (also available on the main page of your application in the developer portal: https://discord.com/developers/applications))
# Must be a valid Discord application ID (see https://support-dev.discord.com/hc/en-us/articles/360028717192-Where-can-I-find-my-Application-Team-Server-ID-)
DISCORD_BOT_APPLICATION_ID=[Replace with your Discord application ID]

# !!REQUIRED!!
# The ID of the CSS Discord server
# Must be a valid Discord guild ID (see https://docs.pycord.dev/en/stable/api/abcs.html#discord.abc.Snowflake.id)
DISCORD_GUILD_ID=[Replace with your Discord server ID]


# !!REQUIRED!!
# The URL of the CSS members page (currently found on the Guild of Students website, make sure it's sorted by group)
# Must be a valid URL
MEMBERS_PAGE_URL=https://www.guildofstudents.com/organisation/memberlist/6531/?sort=groups

# !!REQUIRED!!
# The CSS members page session cookie (probably listed as .ASPXAUTH, gives the bot permission to view your members page as if it were logged in to the website as a Committee member, you can extract this from your web browser after logging into the CSS members page)
MEMBERS_PAGE_COOKIE=[Replace with your .ASPXAUTH cookie]

# The minimum level that logs must meet in order to be logged to the output stream
# One of: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO


# The probability that the more rare ping command response will be sent instead of the normal one
# Must be a float between & including 1 & 0
PING_COMMAND_EASTER_EGG_PROBABILITY=0.01


# The path to the messages JSON file that contains the common messages sent by the bot
# Must be a path to a JSON file that exists, that contains a JSON string that can be decoded into a Python dict object
MESSAGES_FILE_PATH=messages.json

# The path to the members_lists JSON file that contains the list of hashed IDs of users that have used the /makemember command & the list of IDs of members that have opted out of introduction reminders
# Must be a path to a JSON file that exists, that contains a JSON string that can be decoded into a Python dict object
MEMBERS_LISTS_FILE_PATH=made_members.json

# Whether introduction reminders will be sent to users that are not inducted, saying that they need to send an introduction to be allowed access
# Must be a boolean (True or False)
SEND_INTRODUCTION_REMINDERS=True

# The interval of time between sending out reminders to users that are not inducted, saying that they need to send an introduction to be allowed access
# Is ignored if SEND_INTRODUCTION_REMINDERS=False
# Must be a string of the seconds, minutes or hours between reminders (format: "<seconds>s<minutes>m<hours>h")
INTRODUCTION_REMINDER_INTERVAL=6h

# Whether to kick users that that have been in the server for a KICK_NO_INTRODUCTION_MEMBERS_DELAY amount of time but have not yet send an introduction
# Must be a boolean (True or False)
KICK_NO_INTRODUCTION_MEMBERS=False

# How long to wait before kicking users that have not sent an introduction (only executed every INTRODUCTION_REMINDER_INTERVAL amount of time)
# Is ignored if KICK_NO_INTRODUCTION_MEMBERS=False
# Must be a string of the seconds, minutes or hours between reminders (format: "<seconds>s<minutes>m<hours>h")
KICK_NO_INTRODUCTION_MEMBERS_DELAY=120h
