# !!REQUIRED!!
# The Discord token for the bot you created (available on your bot page in the developer portal: https://discord.com/developers/applications))
# Must be a valid Discord bot token (see https://discord.com/developers/docs/topics/oauth2#bot-vs-user-accounts)
DISCORD_BOT_TOKEN=[Replace with your Discord bot token]

# !!REQUIRED!!
# The ID of the your Discord guild
# Must be a valid Discord guild ID (see https://docs.pycord.dev/en/stable/api/abcs.html#discord.abc.Snowflake.id)
DISCORD_GUILD_ID=[Replace with the ID of the your Discord guild]

# The webhook URL of the Discord text channel where error logs should be sent
# Error logs will always be sent to the console, this setting allows them to also be sent to a Discord log channel
# Must be a valid Discord channel webhook URL (see https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks)
DISCORD_LOG_CHANNEL_WEBHOOK_URL=[Replace with your Discord log channel webhook URL]

# The full name of your community group, do NOT use an abbreviation.
# This is substituted into many error/welcome messages sent into your Discord guild, by the bot.
# If this is not set the group-full-name will be retrieved from the name of your group's Discord guild
GROUP_NAME=[Replace with the full name of your community group (not an abbreviation)]

# The short colloquial name of your community group, it is recommended that you set this to be an abbreviation of your group's name.
# If this is not set the group-short-name will be determined from your group's full name
GROUP_SHORT_NAME=[Replace with the short colloquial name of your community group]

# The URL of the page where guests can purchase a full membership to join your community group
# Must be a valid URL
PURCHASE_MEMBERSHIP_URL=[Replace with your group\'s purchase-membership URL]

# The URL of the page containing information about the perks of buying a full membership to join your community group
# Must be a valid URL
MEMBERSHIP_PERKS_URL=[Replace with your group\'s membership-perks URL]

# The invite link URL to allow users to join your community group's Discord server
# Must be a valid URL
CUSTOM_DISCORD_INVITE_URL=[Replace with your group\'s Discord server invite link]


# The minimum level that logs must meet in order to be logged to the console output stream
# One of: DEBUG, INFO, WARNING, ERROR, CRITICAL
CONSOLE_LOG_LEVEL=INFO


# !!REQUIRED!!
# The URL to retrieve the list of IDs of people that have purchased a membership to your community group
# Ensure that all members are visible without pagination. For example, if your members-list is found on the UoB Guild of Students website, ensure the URL includes the "sort by groups" option
# Must be a valid URL
ORGANISATION_ID=[Replace with your group\'s MSL Organisation ID]

# !!REQUIRED!!
# The cookie required for access to your Student Union's online platform.
# If your group's members-list is stored at a URL that requires authentication, this session cookie should authenticate the bot to view your group's members-list, as if it were logged in to the website as a Committee member
# This can be extracted from your web-browser, after logging in to view your members-list yourself. It will probably be listed as a cookie named `.ASPXAUTH`
SU_PLATFORM_ACCESS_COOKIE=[Replace with your .ASPXAUTH cookie]


# The probability that the more rare ping command response will be sent instead of the normal one
# Must be a float between & including 0 to 1
PING_COMMAND_EASTER_EGG_PROBABILITY=0.01


# The path to the messages JSON file that contains the common messages sent by the bot
# Must be a path to a JSON file that exists, that contains a JSON string that can be decoded into a Python dict object
MESSAGES_FILE_PATH=messages.json


# Whether introduction reminders will be sent to Discord members that are not inducted, saying that they need to send an introduction to be allowed access
# One of: Once, Interval, False
SEND_INTRODUCTION_REMINDERS=Once

# How long to wait after a user joins your guild before sending them the first/only message remind them to send an introduction
# Is ignored if SEND_INTRODUCTION_REMINDERS=False
# Must be a string of the seconds, minutes, hours, days or weeks before the first/only reminder is sent (format: "<seconds>s<minutes>m<hours>h<days>d<weeks>w")
# The delay must be longer than or equal to 1 day (in any allowed format)
SEND_INTRODUCTION_REMINDERS_DELAY=40h

# The interval of time between sending out reminders to Discord members that are not inducted, saying that they need to send an introduction to be allowed access
# Is ignored if SEND_INTRODUCTION_REMINDERS=Once or SEND_INTRODUCTION_REMINDERS=False
# Must be a string of the seconds, minutes or hours between reminders (format: "<seconds>s<minutes>m<hours>h")
SEND_INTRODUCTION_REMINDERS_INTERVAL=6h

# Whether reminders will be sent to Discord members that have been inducted, saying that they can get opt-in roles. (This message will be only sent once per Discord member)
# Must be a boolean (True or False)
SEND_GET_ROLES_REMINDERS=True

# How long to wait after a user is inducted before sending them the message to get some opt-in roles
# Is ignored if SEND_GET_ROLES_REMINDERS=False
# Must be a string of the seconds, minutes, hours, days or weeks before a reminder is sent (format: "<seconds>s<minutes>m<hours>h<days>d<weeks>w")
# The delay must be longer than or equal to 1 day (in any allowed format)
SEND_GET_ROLES_REMINDERS_DELAY=40h

# !!This is an advanced configuration variable, so is unlikely to need to be changed from its default value!!
# The interval of time between sending out reminders to Discord members that have been inducted, saying that they can get opt-in roles. (This message will be only sent once, the interval is just how often the check for new guests occurs)
# Is ignored if SEND_GET_ROLES_REMINDERS=False
# Must be a string of the seconds, minutes or hours between reminders (format: "<seconds>s<minutes>m<hours>h")
ADVANCED_SEND_GET_ROLES_REMINDERS_INTERVAL=24h


# The number of days to look over messages sent, to generate statistics data
# Must be a float representing the number of days to look back through
STATISTICS_DAYS=30

# The names of the roles to gather statistics about, to display in bar chart graphs
# Must be a comma seperated list of strings of role names
STATISTICS_ROLES=Committee,Committee-Elect,Student Rep,Member,Guest,Server Booster,Foundation Year,First Year,Second Year,Final Year,Year In Industry,Year Abroad,PGT,PGR,Alumnus/Alumna,Postdoc,Quiz Victor


# !!REQUIRED!!
# The URL of the your group's Discord guild moderation document
# Must be a valid URL
MODERATION_DOCUMENT_URL=[Replace with your group\'s moderation document URL]


# The name of the channel, that warning messages will be sent to when a committee-member manually applies a moderation action (instead of using the `/strike` command)
# Must be the name of a Discord channel in your group's Discord guild, or the value "DM" (which indicates that the messages will be sent in the committee-member's DMs)
# This can be the name of ANY Discord channel (so the offending person *will* be able to see these messages if a public channel is chosen)
MANUAL_MODERATION_WARNING_MESSAGE_LOCATION=DM
