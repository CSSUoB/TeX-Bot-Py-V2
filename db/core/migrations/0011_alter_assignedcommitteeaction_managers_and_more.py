# Generated by Django 5.2.3 on 2025-07-03 19:50

import hashlib
import json
from pathlib import Path
from typing import TYPE_CHECKING

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

if TYPE_CHECKING:
    from collections.abc import Mapping

    from django.apps import registry
    from django.db.backends.base.schema import BaseDatabaseSchemaEditor


def _reverse_discord_id_hash(
    apps: "registry.Apps", schema_editor: "BaseDatabaseSchemaEditor"
) -> None:
    db_alias: str = schema_editor.connection.alias

    DiscordMember: type = apps.get_model("core", "DiscordMember")
    if not issubclass(DiscordMember, models.Model):
        raise TypeError

    all_instances: models.QuerySet[models.Model] = DiscordMember.objects.using(db_alias).all()

    if not all_instances.exists():
        return

    precomputed_hashed_discord_ids: Mapping[str, str] = {
        hashed_discord_id: discord_id_info[0]
        for hashed_discord_id, discord_id_info in json.loads(
            Path("discord_ids.json").read_text()
        ).items()
    }

    instance: models.Model
    for instance in all_instances.iterator():
        hashed_discord_id: object = getattr(instance, "hashed_discord_id")  # noqa: B009
        if not isinstance(hashed_discord_id, str):
            raise TypeError

        discord_id: str | None = precomputed_hashed_discord_ids.get(hashed_discord_id, None)
        if discord_id is None:
            raise KeyError(
                f"Cannot reverse Discord ID hash: '{hashed_discord_id}'. "
                "Please delete this entry then try the migration again."
            )

        setattr(instance, "discord_id", discord_id)  # noqa: B010
        instance.save()


def _revert_reverse_discord_id_hash(
    apps: "registry.Apps", schema_editor: "BaseDatabaseSchemaEditor"
) -> None:
    db_alias: str = schema_editor.connection.alias

    DiscordMember: type = apps.get_model("core", "DiscordMember")
    if not issubclass(DiscordMember, models.Model):
        raise TypeError

    instance: models.Model
    for instance in DiscordMember._default_manager.using(db_alias).all().iterator():
        discord_id: object = getattr(instance, "discord_id")  # noqa: B009
        if not isinstance(discord_id, str):
            raise TypeError

        setattr(instance, "hashed_discord_id", hashlib.sha256(discord_id.encode()).hexdigest())  # noqa: B010
        instance.save()


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0010_assignedcommitteeaction"),
    ]

    operations = [
        migrations.AlterModelManagers(
            name="assignedcommitteeaction",
            managers=[],
        ),
        migrations.AlterModelManagers(
            name="discordmember",
            managers=[],
        ),
        migrations.AlterModelManagers(
            name="discordmemberstrikes",
            managers=[],
        ),
        migrations.AlterModelManagers(
            name="discordreminder",
            managers=[],
        ),
        migrations.AlterModelManagers(
            name="introductionreminderoptoutmember",
            managers=[],
        ),
        migrations.AlterModelManagers(
            name="sentgetrolesremindermember",
            managers=[],
        ),
        migrations.AlterModelManagers(
            name="sentoneoffintroductionremindermember",
            managers=[],
        ),
        migrations.AddField(
            model_name="discordmember",
            name="discord_id",
            field=models.CharField(
                max_length=20,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        "\\A\\d{17,20}\\Z",
                        "discord_id must be a valid Discord member ID (see https://docs.pycord.dev/en/stable/api/abcs.html#discord.abc.Snowflake.id)",
                    )
                ],
                verbose_name="Discord Member ID",
            ),
        ),
        migrations.RunPython(
            code=_reverse_discord_id_hash,
            reverse_code=_revert_reverse_discord_id_hash,
        ),
        migrations.RemoveField(
            model_name="discordmember",
            name="hashed_discord_id",
        ),
        migrations.AlterField(
            model_name="discordmember",
            name="discord_id",
            field=models.CharField(
                max_length=20,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        "\\A\\d{17,20}\\Z",
                        "discord_id must be a valid Discord member ID (see https://docs.pycord.dev/en/stable/api/abcs.html#discord.abc.Snowflake.id)",
                    )
                ],
                verbose_name="Discord Member ID",
            ),
        ),
    ]
