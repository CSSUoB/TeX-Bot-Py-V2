# Generated by Django 5.0.4 on 2024-05-18 23:15

from collections.abc import Iterable
from typing import Final

from django.db import migrations
from django.db.models import Model
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.apps import registry

from db.core.models.utils import DiscordMember


MODEL_NAMES_TO_FIX: Final[Iterable[str]] = (
    "DiscordMemberStrikes",
    "DiscordReminder",
    "IntroductionReminderOptOutMember",
    "SentGetRolesReminderMember",
    "SentOneOffIntroductionReminderMember",
)


# noinspection PyUnusedLocal
def fix_discord_member_relations(apps: registry.Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    db_alias: str = schema_editor.connection.alias

    model_name: str
    for model_name in MODEL_NAMES_TO_FIX:
        RawModelToFix: type = apps.get_model("core", model_name)
        if not issubclass(RawModelToFix, Model):
            raise TypeError
        ModelToFix: type[Model] = RawModelToFix

        instance: Model
        # noinspection PyProtectedMember
        for instance in ModelToFix._default_manager.using(db_alias).all().iterator():
            old_hashed_discord_id: object = getattr(instance, "hashed_member_id")
            if not isinstance(old_hashed_discord_id, str):
                raise TypeError

            setattr(
                instance,
                "discord_member_id",
                DiscordMember.objects.get_or_create(
                    hashed_discord_id=old_hashed_discord_id,
                )[0].id,
            )
            instance.save()


# noinspection PyUnusedLocal
def revert_fix_discord_member_relations(apps: registry.Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    db_alias: str = schema_editor.connection.alias

    model_name: str
    for model_name in MODEL_NAMES_TO_FIX:
        RawModelToFix: type = apps.get_model("core", model_name)
        if not issubclass(RawModelToFix, Model):
            raise TypeError
        ModelToFix: type[Model] = RawModelToFix

        instance: Model
        # noinspection PyProtectedMember
        for instance in ModelToFix._default_manager.using(db_alias).all().iterator():
            old_discord_member: object = getattr(instance, "discord_member")
            if not hasattr(old_discord_member, "hashed_discord_id"):
                raise TypeError

            # noinspection PyUnresolvedReferences
            setattr(
                instance,
                "hashed_member_id",
                old_discord_member.hashed_discord_id,
            )
            instance.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0007_discordmember_alter_discordmemberstrikes_options_and_more'),
    ]

    operations = [
        migrations.RunPython(
            code=fix_discord_member_relations,
            reverse_code=revert_fix_discord_member_relations,
        ),
    ]
